syntax = "proto3";
option py_generic_services = false;

package specdecode;

// A new StartRequest for multi-sequence batch is not required.
// We keep the single StartRequest for single-session usage.
message StartRequest {
  uint64 session_id = 1;       // track sessions
  string prompt = 2;
  uint32 max_new_tokens = 3;
  uint32 gamma = 4; // chunk size
}

message StartResponse {
  bool acknowledged = 1;
  uint64 session_id = 2;
}

message DraftSequence {
  uint64 session_id = 1;
  repeated int32  draft_tokens = 2;
  repeated float  draft_probs  = 3;   // <<< NEW  proposal probs q(d_i|ctx)
}

message VerifyBatchRequest {
  repeated DraftSequence sequences = 1;
}

message VerifyRequest {
  uint64 session_id   = 1;
  repeated int32 draft_tokens = 2;
  repeated float draft_probs  = 3;    // <<< NEW
}


message VerifyResult {
  uint64 session_id     = 1;
  uint32 tokens_accepted = 2;
  int32  target_token    = 3;
  bool   finished        = 4;
}

message VerifyBatchResponse {
  repeated VerifyResult results = 1;
}

// For finalizing tokens on target side after acceptance.
message FinalizeSequence {
  uint64 session_id = 1;        // same session
  repeated int32 tokens = 2;    // tokens accepted or forced by target
}

message FinalizeBatchRequest {
  repeated FinalizeSequence sequences = 1;
}

message FinalizeBatchResult {
  uint64 session_id = 1;
  bool finished = 2;
}

message FinalizeBatchResponse {
  repeated FinalizeBatchResult results = 1;
}

// The older single-sequence definitions are left for backward compatibility.
// However, we can keep them or remove them if you prefer. For a safe drop-in,
// we keep them, but the server and client can choose which to call.


message VerifyResponse {
  // Tokens that actually became part of the sequence
  repeated int32 committed_ids = 1;
  // How many of those committed tokens were accepted draft tokens
  uint32 accepted_count = 2;
  // Generation finished?
  bool finished = 3;
  // Time spent on the target side verifying this draft chunk (milliseconds)
  float verify_time_ms = 4;
}

message FinalizeRequest {
  uint64 session_id = 1;
  uint32 accepted_count = 2;
  uint32 draft_chunk_size = 3;
}

message FinalizeResponse {
  int32 final_token = 1;
  bool finished = 2;
}

// For a baseline generation.
message GenerateRequest {}

message GenerateResponse {
  string output_text = 1;
}

// Speculative Decoding gRPC Service definition
service SpeculativeService {
  rpc StartGeneration(StartRequest) returns (StartResponse);

  // BATCH calls
  rpc VerifyBatchTokens(VerifyBatchRequest) returns (VerifyBatchResponse);
  rpc FinalizeBatchTokens(FinalizeBatchRequest) returns (FinalizeBatchResponse);

  // Single-sequence calls
  rpc VerifyDraftTokens(VerifyRequest) returns (VerifyResponse);
  rpc FinalizeTokens(FinalizeRequest) returns (FinalizeResponse);

  // Optional full generation for baseline
  rpc GenerateFull(StartRequest) returns (GenerateResponse);
}