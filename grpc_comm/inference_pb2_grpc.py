# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import inference_pb2 as inference__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in inference_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SpeculativeServiceStub(object):
    """Speculative Decoding gRPC Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartGeneration = channel.unary_unary(
                '/specdecode.SpeculativeService/StartGeneration',
                request_serializer=inference__pb2.StartRequest.SerializeToString,
                response_deserializer=inference__pb2.StartResponse.FromString,
                _registered_method=True)
        self.VerifyBatchTokens = channel.unary_unary(
                '/specdecode.SpeculativeService/VerifyBatchTokens',
                request_serializer=inference__pb2.VerifyBatchRequest.SerializeToString,
                response_deserializer=inference__pb2.VerifyBatchResponse.FromString,
                _registered_method=True)
        self.FinalizeBatchTokens = channel.unary_unary(
                '/specdecode.SpeculativeService/FinalizeBatchTokens',
                request_serializer=inference__pb2.FinalizeBatchRequest.SerializeToString,
                response_deserializer=inference__pb2.FinalizeBatchResponse.FromString,
                _registered_method=True)
        self.VerifyDraftTokens = channel.unary_unary(
                '/specdecode.SpeculativeService/VerifyDraftTokens',
                request_serializer=inference__pb2.VerifyRequest.SerializeToString,
                response_deserializer=inference__pb2.VerifyResponse.FromString,
                _registered_method=True)
        self.FinalizeTokens = channel.unary_unary(
                '/specdecode.SpeculativeService/FinalizeTokens',
                request_serializer=inference__pb2.FinalizeRequest.SerializeToString,
                response_deserializer=inference__pb2.FinalizeResponse.FromString,
                _registered_method=True)
        self.GenerateFull = channel.unary_unary(
                '/specdecode.SpeculativeService/GenerateFull',
                request_serializer=inference__pb2.StartRequest.SerializeToString,
                response_deserializer=inference__pb2.GenerateResponse.FromString,
                _registered_method=True)


class SpeculativeServiceServicer(object):
    """Speculative Decoding gRPC Service definition
    """

    def StartGeneration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyBatchTokens(self, request, context):
        """BATCH calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeBatchTokens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyDraftTokens(self, request, context):
        """Single-sequence calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeTokens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateFull(self, request, context):
        """Optional full generation for baseline
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeculativeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartGeneration': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGeneration,
                    request_deserializer=inference__pb2.StartRequest.FromString,
                    response_serializer=inference__pb2.StartResponse.SerializeToString,
            ),
            'VerifyBatchTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyBatchTokens,
                    request_deserializer=inference__pb2.VerifyBatchRequest.FromString,
                    response_serializer=inference__pb2.VerifyBatchResponse.SerializeToString,
            ),
            'FinalizeBatchTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeBatchTokens,
                    request_deserializer=inference__pb2.FinalizeBatchRequest.FromString,
                    response_serializer=inference__pb2.FinalizeBatchResponse.SerializeToString,
            ),
            'VerifyDraftTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyDraftTokens,
                    request_deserializer=inference__pb2.VerifyRequest.FromString,
                    response_serializer=inference__pb2.VerifyResponse.SerializeToString,
            ),
            'FinalizeTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeTokens,
                    request_deserializer=inference__pb2.FinalizeRequest.FromString,
                    response_serializer=inference__pb2.FinalizeResponse.SerializeToString,
            ),
            'GenerateFull': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateFull,
                    request_deserializer=inference__pb2.StartRequest.FromString,
                    response_serializer=inference__pb2.GenerateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'specdecode.SpeculativeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('specdecode.SpeculativeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SpeculativeService(object):
    """Speculative Decoding gRPC Service definition
    """

    @staticmethod
    def StartGeneration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/specdecode.SpeculativeService/StartGeneration',
            inference__pb2.StartRequest.SerializeToString,
            inference__pb2.StartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyBatchTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/specdecode.SpeculativeService/VerifyBatchTokens',
            inference__pb2.VerifyBatchRequest.SerializeToString,
            inference__pb2.VerifyBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FinalizeBatchTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/specdecode.SpeculativeService/FinalizeBatchTokens',
            inference__pb2.FinalizeBatchRequest.SerializeToString,
            inference__pb2.FinalizeBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyDraftTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/specdecode.SpeculativeService/VerifyDraftTokens',
            inference__pb2.VerifyRequest.SerializeToString,
            inference__pb2.VerifyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FinalizeTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/specdecode.SpeculativeService/FinalizeTokens',
            inference__pb2.FinalizeRequest.SerializeToString,
            inference__pb2.FinalizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateFull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/specdecode.SpeculativeService/GenerateFull',
            inference__pb2.StartRequest.SerializeToString,
            inference__pb2.GenerateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
